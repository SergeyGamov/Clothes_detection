# -*- coding: utf-8 -*-
"""Clothes_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jpsX18RhEebNIK3OX-Zz_cV9gMKmoKnW
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
# %matplotlib inline
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras import utils

# splitting dataset to training and testing selection

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Data pre-processing

# Let's check how pictures look like

plt.figure()
plt.imshow(x_train[0])
plt.colorbar()
plt.grid(False)

# data normalization

x_train = x_train / 255
x_test = x_test / 255

plt.figure()
plt.imshow(x_train[0])
plt.colorbar()
plt.grid(False)

# let's see several images on one screen

plt.figure(figsize=(10, 10))
for i in range (25):
  plt.subplot(5, 5, i+1)
  plt.xticks([])
  plt.yticks([])  
  plt.imshow(x_train[i])
  plt.xlabel(class_names[y_train[i]])

# creating of neural network model

model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)),
                          keras.layers.Dense(128, activation="relu"),
                          keras.layers.Dense(10, activation="softmax")
])

# компиляция модели

model.compile(optimizer=tf.keras.optimizers.SGD(), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.summary()

# model training

model.fit(x_train, y_train, epochs=10)

# checking of predicting accurecy

test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test accuracy:', test_acc)

# predicting of images

predictions = model.predict(x_train)

predictions[100]

np.argmax(predictions[100])

y_train[100]

plt.figure()
plt.imshow(x_train[100])
plt.colorbar()
plt.grid(False)

class_names[np.argmax(predictions[100])]